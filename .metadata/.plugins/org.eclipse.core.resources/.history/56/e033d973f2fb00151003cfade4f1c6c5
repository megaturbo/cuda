#pragma once

#include <math.h>
#include "MathTools.h"

#include "Calibreur_CPU.h"
#include "ColorTools_CPU.h"
using namespace cpu;

/* ========== DECLARATION ========== */

class MandelbrotMath
{
	/* ---------- PUBLIC ---------- */

public:
	/* ---------- CONSTRUCTEUR ---------- */

	MandelbrotMath(uint n) :
			calibreur(Interval<float>(-2.1, -1.3), Interval<float>(0.8, 1.3))
	{
		this->n = n;
	}

	virtual ~MandelbrotMath()
	{
		// Nope
	}

	/* ---------- METHODES ---------- */

	void colorXY(uchar4 *ptrColor, float x, float y, float t)
	{
		float hue = f(x, y);

		hue = (1.0 / this->n) * hue;

		ColorTools::HSB_TO_RVB(hue, ptrColor);

		ptrColor->w = 255;
	}

private:

	float f(float x, float y)
	{
		return getDivergent(x, y);
	}

	bool isDivergent(float z)
	{
		return z > 2.0 ? true : false;
	}

	int getDivergent(float x, float y)
	{
		int divergent = 0;
		float zr = 0.0;
		float zi = 0.0;
		float old_zr;

		for(divergent = 0; divergent < this->n; divergent++)
		{
			if(isDivergent(norm(zr, zi)))
				return divergent;

			//r = a^2 - b^2
			//im = 2*ab
			old_z = zr;
			zr = pow(zr, 2) - pow(zi, 2) + x;
			zi = 2 * old_zr * zi + y;
		}

		return divergent;
	}

	float norm(float a, float b)
	{
		return sqrt(pow(a, 2) + pow(b, 2));
	}

	/* ---------- ATTRIBUTS ---------- */

	// Input
	uint n;

	// Tools
	Calibreur<float> calibreur;
};
