#pragma once

#include <math.h>
#include "MathTools.h"

#include "Calibreur_CPU.h"
#include "ColorTools_CPU.h"
using namespace cpu;

/*----------------------------------------------------------------------*\
 |*			Declaration 					*|
 \*---------------------------------------------------------------------*/

/*--------------------------------------*\
 |*				Public					*|
 \*-------------------------------------*/

class JuliaMath
{
	/*--------------------------------------*\
	|*				Constructeur			*|
	 \*-------------------------------------*/

public:

	MandelbrotMath(uint n) :
			calibreur(Interval<float>(-2.1, -1.3), Interval<float>(0.8, 1.3))
	{
		this->n = n;
	}

	// constructeur copie: pas besoin car pas attribut ptr

	virtual ~MandelbrotMath(void)
	{
		// rien
	}

	/*--------------------------------------*\
	|*				Methode					*|
	 \*-------------------------------------*/

public:

	void colorXY(uchar4* ptrColor, float x, float y)
	{
		float k = mandelbrot(x, y);
		float hue = (1.0 / this->n) * k;
		ColorTools::HSB_TO_RVB(hue, ptrColor);
		ptrColor->w = 255;
	}

private:
	bool isDivergent(float zr, float zi)
	{
		return sqrtf(zr * zr + zi * zi) > 2.0;
	}

	int mandelbrot(float x, float y)
	{
		float zr = 0;
		float zi = 0;

		for (int k = 0; k <= this->n; k++)
		{
			if(isDivergent(zr, zi))
			{
				return k;
			}
			else
			{
				// z^2	=	(x^2-y^2)+i(2xy)
				float old_zr = zr;
				zr = zr * zr - zi * zi + x;
				zi = 2.0 * zr * zi + y;
			}
		}
		return this->n;
	}

	/*--------------------------------------*\
	|*				Attribut				*|
	 \*-------------------------------------*/

private:

	// Input
	int n;

	// Tools
	Calibreur<float> calibreur;

};

/*----------------------------------------------------------------------*\
 |*			End	 					*|
 \*---------------------------------------------------------------------*/
