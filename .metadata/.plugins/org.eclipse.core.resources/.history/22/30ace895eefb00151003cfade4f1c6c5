#include "MandelbrotMath.h"

/*----------------------------------------------------------------------*\
 |*			Declaration 					*|
 \*---------------------------------------------------------------------*/
MandelbrotMath::MandelbrotMath(uint n) : Fractal(uint n),
calibreur(Interval<float>(-2.1, -1.3), Interval<float>(0.8, 1.3))
{
}

MandelbrotMath::~MandelbrotMath()
{
}

/*--------------------------------------*\
 |*		Public			*|
 \*-------------------------------------*/

int MandelbrotMath::getK(float x, float y)
{
	float zr = x;
	float zi = y;

	for (int k = 0; k <= this->n; k++)
	{
		if(isDivergent(zr, zi))
		{
			return k;
		}
		else
		{
			// z^2	=	(x^2-y^2)+i(2xy)
			float old_zr = zr;
			zr = zr * zr - zi * zi + x;
			zi = 2.0 * zr * zi + y;
		}
	}
	return this->n;
}
/*--------------------------------------*\
 |*		Private			*|
 \*-------------------------------------*/

/*----------------------------------------------------------------------*\
 |*			Implementation 					*|
 \*---------------------------------------------------------------------*/

/*--------------------------------------*\
 |*		Public			*|
 \*-------------------------------------*/

/*--------------------------------------*\
 |*		Private			*|
 \*-------------------------------------*/

/*----------------------------------------------------------------------*\
 |*			End	 					*|
 \*---------------------------------------------------------------------*/

