#include <iostream>
#include <assert.h>

#include "Device.h"
#include "Mandelbrot.h"

using std::cout;
using std::endl;

/* ========== DECLARATION ========== */

extern __global__ void mandelbrot(uchar4* ptrDevPixels, int w, int h, int n, const DomaineMath& domaineMath);

/* ---------- PUBLIC ---------- */

Mandelbrot::Mandelbrot(const Grid &grid, uint width, uint height,
		float deltaTime, uint n, const DomaineMath &domaineMath) :
		Animable_I<uchar4>(width, height, "Mandelbrot Roulin", domaineMath), variateurAnimation(
				Interval<float>(0, 2 * PI), deltaTime)
{
	// Inputs
	this->n = n;

	// Tools
	this->t = 0;
}

Mandelbrot::~Mandelbrot(void)
{
	// Rien
}

/* ~~~~~~~~~~  METHODS  ~~~~~~~~~~ */
/**
 * Override
 * Call periodicly by the API
 *
 * Note : domaineMath pas use car pas zoomable
 */
void Mandelbrot::process(uchar4* ptrDevPixels, uint w, uint h,
		const DomaineMath& domaineMath)
{
	Device::lastCudaError("mandelbrot rgba uchar4 (before)"); // facultatif, for debug only, remove for release

	// start kernel
	mandelbrot<<<dg, db>>>(ptrDevPixels,w,h,t);

	Device::lastCudaError("mandelbrot rgba uchar4 (after)"); // facultatif, for debug only, remove for release
}

/* ~~~~~~~~~~ OVERRIDES ~~~~~~~~~~ */

void Mandelbrot::animationStep()
{
	this->t = variateurAnimation.varierAndGet();
}

/**
 * Override (code naturel omp)
 */
