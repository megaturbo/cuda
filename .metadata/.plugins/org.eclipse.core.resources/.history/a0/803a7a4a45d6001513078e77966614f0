#include <omp.h>
#include "MathTools.h"
#include "OmpTools.h"
#include "../02_Slice/00_pi_tools.h"

/*----------------------------------------------------------------------*\
 |*			Declaration 					*|
 \*---------------------------------------------------------------------*/

/*--------------------------------------*\
 |*		Imported	 	*|
 \*-------------------------------------*/

/*--------------------------------------*\
 |*		Public			*|
 \*-------------------------------------*/

bool isPiOMPforPromotionTab_Ok(int n);

/*--------------------------------------*\
 |*		Private			*|
 \*-------------------------------------*/

static double piOMPforPromotionTab(int n);
static void syntaxeSimplifier(double* tabSumThread, int n);
static void syntaxeFull(double* tabSumThread, int n);

/*----------------------------------------------------------------------*\
 |*			Implementation 					*|
 \*---------------------------------------------------------------------*/

/*--------------------------------------*\
 |*		Public			*|
 \*-------------------------------------*/

bool isPiOMPforPromotionTab_Ok(int n)
{
	return isAlgoPI_OK(piOMPforPromotionTab, n, "Pi OMP for promotion tab");
}

/*--------------------------------------*\
 |*		Private			*|
 \*-------------------------------------*/

/**
 * De-synchronisation avec PromotionTab
 */
double piOMPforPromotionTab(int n)
{
	const int NB_THREAD = OmpTools::setAndGetNaturalGranularity();
	const double DX = 1 / (double) n;
	double global_sum = 0.0;
	double* ptr_tab_thread = new double[NB_THREAD];
	double xi;

	for (int i = 0; i < NB_THREAD; i++)
	{
		ptr_tab_thread[i] = 0;
	}

#pragma omp parallel for private(xi)
	for (int i = 0; i < n; i++)
	{
		const int TID = OmpTools::getTid();
		xi = i * DX;
		ptr_tab_thread[TID] += fpi(xi);
	}
	for (int i = 0; i < NB_THREAD; i++)
	{
		sum += ptr_tab_thread[i];
	}

	delete[] ptr_tab_thread;
	return global_sum / n;
}

/*----------------------------------------------------------------------*\
 |*			End	 					*|
 \*---------------------------------------------------------------------*/

