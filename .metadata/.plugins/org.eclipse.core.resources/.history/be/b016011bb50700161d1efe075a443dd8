#include "Slice.h"

#include "Device.h"
#include <iostream>

using std::cout;
using std::endl;

extern __global__ void Slice(int nbSlice);

Slice::Slice(float* ptrDevPi, int nbSlice) :
		nbSlice(nbSlice)
{
	this->sizeOctetPi = sizeof(float);

	// MM
	{
		// MM (malloc Device)
		{
			HANDLE_ERROR(cudaMalloc(&ptrDevPi, sizeOctetPi));
		}

		// MM (memset Device)
		{
			HANDLE_ERROR(cudaMemset(ptrDevPi, 0, sizeOctetPi));
		}

		// MM (copy Host->Device)
		{
			// Nope
		}

		Device::lastCudaError("Slice MM (end allocation)"); // temp debug
	}

	{
		this->dg = dim3(16, 2, 1);
		this->db = dim3(32, 4, 1); // contrainte, produit des 3 = 2^n

		Device::gridHeuristic(dg, db);
	}

	this->sizeOctetSM = db.x * db.y * sizeof(float);
	// assert contrainte
}

Slice::~Slice(void)
{
	//MM (device free)
	{
		HANDLE_ERROR(cudaFree(ptrDevPi));

		Device::lastCudaError("Slice MM (end deallocation)"); // temp debug
	}
}

void Slice::run()
{
	Device::lastCudaError("Slice (before)"); // temp debug
	slice<<<dg,db>>>(ptrDevPi, nbSlice); // assynchrone
	Device::lastCudaError("Slice (after)"); // temp debug

//	Device::synchronize(); // Temp, only for printf in  GPU
	{
		HANDLE_ERROR(
				cudaMemcpy(ptrPi, ptrDevPi, sizeOctet, cudaMemcpyDeviceToHost)); // barriere synchronisation implicite
	}
}
