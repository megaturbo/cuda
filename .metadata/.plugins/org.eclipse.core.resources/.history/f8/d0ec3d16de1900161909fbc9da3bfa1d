#include "Indice2D.h"
#include "cudaTools.h"
#include "ReduceTools.h"

#include <stdio.h>

__global__ void slice(float *ptrDevPi, int nbSlice);

/*--------------------------------------*\
 |*		Private			*|
 \*-------------------------------------*/

static __device__ void reduceIntraThread(float* tabSM, int nbSlice);
static __device__ float rektArea(int x, int nbSlice);

/*----------------------------------------------------------------------*\
 |*			Implementation 					*|
 \*---------------------------------------------------------------------*/

/*--------------------------------------*\
 |*		Public			*|
 \*-------------------------------------*/

/**
 * output : void required !!
 */
__global__ void slice(float* ptrDevPi, int nbSlice)
{
	extern __shared__ float tabSM[];
	reduceIntraThread(tabSM, nbSlice);
	__syncthreads();

	const int NB_THREAD_BLOCK = Indice1D::nbThread();

	ReduceTools<float> reduceTools(NB_THREAD_BLOCK);
	reduceTools.reduceIntraBlock(tabSM);
	reduceTools.reduceInterBlock(tabSM, ptrDevPi);
}

/*--------------------------------------*\
 |*		Private			*|
 \*-------------------------------------*/

__device__
void reduceIntraThread(float *tabSM, int nbSlice)
{
	float sumThread = 0.0f;

	const int TID_LOCAL = Indice1D::tidLocal();
	const int TID = Indice1D::tid();
	const int NB_THREAD = Indice1D::nbThread();

	int s = TID;
	while (s < nbSlice)
	{
		sumThread += rektArea(s, nbSlice);
		s += NB_THREAD;
	}
	tabSM[TID_LOCAL] = sumThread;
}

__device__ float f(float x)
{
	return 4.0f / (1.0f + x * x);
}

__device__ float rektArea(int s, int nbSlice)
{
	return f(s / (float) nbSlice);
}
