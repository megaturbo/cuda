#include "Indice1D.h"
#include "cudaTools.h"
#include "ReduceTools.h"

#include <stdio.h>

__global__ void slice(float *ptrDevPi, int nbSlice);

/*--------------------------------------*\
 |*		Private			*|
 \*-------------------------------------*/

static __device__ float reduceIntraThread(float* tabSM, int x);
static __device__ float f(int x);

/*----------------------------------------------------------------------*\
 |*			Implementation 					*|
 \*---------------------------------------------------------------------*/

/*--------------------------------------*\
 |*		Public			*|
 \*-------------------------------------*/

/**
 * output : void required !!
 */
__global__ void slice(float* ptrDevPi, int nbSlice)
{
	extern __shared__ float tabSM[];
	reduceIntraThread(tabSM, nbSlice);
	__syncthreads();
	int nsm = Indice1D::nbThreadBlock();

	ReduceTools<float> reduceTools(nsm);

	reduceTools.reduceIntraBlock(tabSM);
	reduceTools.reduceIntraBlock(tabSM, ptrDevResultGM);



}

/*--------------------------------------*\
 |*		Private			*|
 \*-------------------------------------*/


__device__
void reduceIntraThread(int x)
{

}


__device__
float f(int x)
{
	return 1.f / (1.f + (float) x * (float) x);
}
