#include "Indice2D.h"
#include "cudaTools.h"
#include <stdio.h>

#include "ReduceTools.h"

__global__ void histogram(int* ptrTabData, int tabSize, int *ptrDevResult);

static __device__ void reductionIntraThread(int *ptrTabData, int tabSize, int *tabSM);

__global__ void histogram(int* ptrTabData, int tabSize, int *ptrDevResult)
{
	extern __shared__ int tabSM[];

	reductionIntraThread(ptrTabData, tabSize, tabSM);
	__syncthreads();
//	reduceInterBlock(tabSM, ptrDevResult);

	if (Indice2D::tid() == 0)
	{
		for (int i = 0; i < 256; i++)
		{
			printf("%d, ", tabSM[i]);
			atomicAdd(&ptrDevResult[i], tabSM[i]);
		}
	}
}
__device__ void reductionIntraThread(int *ptrTabData, int tabSize, int *tabSM)
{
	const int NB_THREAD = Indice2D::nbThread();
	const int TID_LOCAL = Indice2D::tidLocalBlock();
	const int TID = Indice2D::tid();

	int s = TID;
	int sumThread = 0;

	while (s < tabSize)
	{
//		atomicAdd(&tabSM[ptrTabData[s]], 1);
		sumThread += 1;
		s += NB_THREAD;
	}
	tabSM[TID_LOCAL] = sumThread;
}
