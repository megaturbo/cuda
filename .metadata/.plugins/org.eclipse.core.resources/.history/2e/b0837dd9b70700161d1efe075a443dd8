#include "Indice1D.h"
#include "cudaTools.h"

#include <stdio.h>

__global__ void slice(float *ptrDevPi, int nbSlice);

/*--------------------------------------*\
 |*		Private			*|
 \*-------------------------------------*/

static __device__ float f(int x);

/*----------------------------------------------------------------------*\
 |*			Implementation 					*|
 \*---------------------------------------------------------------------*/

/*--------------------------------------*\
 |*		Public			*|
 \*-------------------------------------*/

/**
 * output : void required !!
 */
__global__ void slice(float* ptrDevPi, int nbSlice)
{
	float sumThread = 0;

	const int TID_LOCAL = Indice1D::tidLocal();
	const int TID = Indice1D::tid();
	const int NB_THREAD = Indice1D::nbThread();

	int s = TID;
	while (s < nbSlice)
	{
		sumThread += f(s);
		s += NB_THREAD;
	}
	ptrDevPi[TID_LOCAL] = sumThread;
}

/*--------------------------------------*\
 |*		Private			*|
 \*-------------------------------------*/

__device__
float f(int x)
{
	return 1.f / (1.f + (float) x * (float) x);
}
