#pragma once

#include "Indice1D.h"
#include "cudaTools.h"

template<typename T>
class ReduceTools
{
public:
	ReduceTools(int n)
	{
		this->n = n;
	}

private:
	void reduceIntraBlock(T* tabSM)
	{
		int half = n / 2;
		while (n > 1)
		{
			crush(tabSM, half);
			half /= 2;
			__syncthread()
		}
	}

	void reduceInterBlock(T* tabSM, T* ptrDevResult)
	{

	}

	void crush(T* tabSM, int half)
	{
		const int THREAD_LOCAL_ID = Indice1D::tidLocal();
		const int NB_THREAD_LOCAL = Indice1D::nbThread();
		int s = THREAD_LOCAL_ID;
		while (s < moitier)
		{
			tabSM[s] += tabSM[s + moitier];
			s += NB_THREAD_LOCAL;
		}
	}

	// Input
	int n;
};
